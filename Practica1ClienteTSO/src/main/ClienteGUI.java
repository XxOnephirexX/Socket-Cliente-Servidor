package main;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import operaciones.*;

/**
 *
 * @author Irvin Carapia Hernández
 */
public class ClienteGUI extends javax.swing.JFrame {

    /**
     * Creates new form ClienteGUI
     */
    public ClienteGUI() {
        initComponents();
        configuracionVentana();
    }

    private void configuracionVentana() {
        setSize(750, 480);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMenu = new javax.swing.JPanel();
        jLabelOpciones = new javax.swing.JLabel();
        jButtonLeer = new javax.swing.JButton();
        jButtonEscribir = new javax.swing.JButton();
        jButtonCopiar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menú");
        setName("menu"); // NOI18N

        jPanelMenu.setLayout(new java.awt.GridLayout(5, 4, 2, 2));

        jLabelOpciones.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabelOpciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOpciones.setText("Elige una opción");
        jPanelMenu.add(jLabelOpciones);

        jButtonLeer.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButtonLeer.setText("Leer un archivo");
        jButtonLeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLeerActionPerformed(evt);
            }
        });
        jPanelMenu.add(jButtonLeer);

        jButtonEscribir.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButtonEscribir.setText("Escribir un archivo");
        jButtonEscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEscribirActionPerformed(evt);
            }
        });
        jPanelMenu.add(jButtonEscribir);

        jButtonCopiar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButtonCopiar.setText("Copiar un archivo");
        jButtonCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopiarActionPerformed(evt);
            }
        });
        jPanelMenu.add(jButtonCopiar);

        jButtonEliminar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButtonEliminar.setText("Eliminar un archivo");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        jPanelMenu.add(jButtonEliminar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLeerActionPerformed
        try {
            ClienteSocket clienteSocket = new ClienteSocket("localhost", 8000);

            // Obtener nombres de archivos del servidor
            ArrayList<String> archivos;
            try {
                archivos = clienteSocket.obtenerNombresArchivosEnServidor();

                if (!archivos.isEmpty()) {
                    clienteSocket.cerrarConexion();
                    // Realiza acciones con la lista de nombres de archivos
                    LeerArchivo leerArchivo = new LeerArchivo(archivos);
                    setVisible(false);
                    dispose();
                    leerArchivo.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontraron archivos en el servidor.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClienteGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException e) {
            // Maneja la excepción en caso de error
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: No hay ningun servidor escuchando.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonLeerActionPerformed

    private void jButtonEscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEscribirActionPerformed
        try {
            ClienteSocket clienteSocket = new ClienteSocket("192.168.1.73", 8000);

            // Obtener nombres de archivos del servidor
            ArrayList<String> archivos;
            try {
                archivos = clienteSocket.obtenerNombresArchivosEnServidor();

                if (!archivos.isEmpty()) {
                    // Realiza acciones con la lista de nombres de archivos
                    EscribirArchivo escribirArchivo = new EscribirArchivo(archivos);
                    setVisible(false);
                    dispose();
                    escribirArchivo.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontraron archivos en el servidor.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClienteGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException e) {
            // Maneja la excepción en caso de error
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: No hay ningun servidor escuchando.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEscribirActionPerformed

    private void jButtonCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopiarActionPerformed
        try {
            ClienteSocket clienteSocket = new ClienteSocket("192.168.1.73", 8000);

            // Obtener nombres de archivos del servidor
            ArrayList<String> archivos;
            try {
                archivos = clienteSocket.obtenerNombresArchivosEnServidor();

                if (!archivos.isEmpty()) {
                    // Realiza acciones con la lista de nombres de archivos
                    CopiarArchivo copiarArchivo = new CopiarArchivo(archivos);
                    setVisible(false);
                    dispose();
                    copiarArchivo.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontraron archivos en el servidor.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }

                // Cierra la conexión al servidor
                clienteSocket.cerrarConexion();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClienteGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException e) {
            // Maneja la excepción en caso de error
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: No hay ningun servidor escuchando.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonCopiarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        try {
            ClienteSocket clienteSocket = new ClienteSocket("192.168.1.73", 8000);

            // Obtener nombres de archivos del servidor
            ArrayList<String> archivos;
            try {
                archivos = clienteSocket.obtenerNombresArchivosEnServidor();

                if (!archivos.isEmpty()) {
                    // Realiza acciones con la lista de nombres de archivos
                    EliminarArchivo eliminarArchivo = new EliminarArchivo(archivos);
                    setVisible(false);
                    dispose();
                    eliminarArchivo.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontraron archivos en el servidor.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }

                // Cierra la conexión al servidor
                clienteSocket.cerrarConexion();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClienteGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException e) {
            // Maneja la excepción en caso de error
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: No hay ningun servidor escuchando.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCopiar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonEscribir;
    private javax.swing.JButton jButtonLeer;
    private javax.swing.JLabel jLabelOpciones;
    private javax.swing.JPanel jPanelMenu;
    // End of variables declaration//GEN-END:variables
}
